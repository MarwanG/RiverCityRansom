Service: GestionCombat
uses: Personnage , Terrain , Gangster, StatusWrapper
types: boolean , int , String , enum COMMAND{UP,DOWN,LEFT,RIGHT, JUMP_UP,JUMP_DOWN,JUMP_LEFT,JUMP_RIGHT,KICK,THROW, PICKUP}

observators:

    const length: [GestionCombat] -> int
    const height : [GestionCombat] -> int
    const width : [GestionCombat] -> int
    const nbGangsters: [GestionCombat] -> int

    const Terrain: [GestionCombat] -> Terrain

    alex: [GestionCombat] -> StatusWrapper
    ryan: [GestionCombat] -> StatusWrapper
    slick: [GestionCombat] -> StatusWrapper
    gangsters: [GestionCombat] -> StatusWrapper[]

    inRange: [GestionCombat] * [StatusWrapper] * [StatusWrapper] -> boolean
        pre: inRange(C,p1,p2) require p1 != p2 =! NULL
            AND p1 is {slick,alex,ryan, gangster[0:nbGangsters-1]}
            AND p2 is {slick,alex,ryan, gangster[0:nbGangsters-1]}


Constructors:
    init: int * int * int -> [GestionCombat]
          pre init(x,y,z) require x > 50 && y > 50 && z > 50

Operators:
    step: [GestionCombat] * COMMANDE * COMMANDE -> [GestionCombat]
        pre: step(C,CR,CA) require CR != Null AND CA != Null
        
Observations:

[Invariant] 
    inRange(C,p1,p2) =min=  
    	(p1::z==p2::z) AND (p1::x(-1 OR +1))==p2::x) OR (p1::y(-1 OR +1))==p2::y)
    


[init]
  
  width(init(w,l,d))=w  
  length(init(w,l,d))=l
  depth(init(w,l,d))=d
  nbGangsters(init(w,l,d)) = w*l*0.30 //30 % du territoire est peuplé de vil méchants

  alex(init(w,l,d))) = StatusWrapper::init(0,0,0,RIGHT,Personnage::init("alex",5,5,5,50))
  ryan(init(w,l,d))) = StatusWrapper::init(0,0,1,RIGHT,Personnage::init("ryan",5,6,5,50))
  slick(init(w,l,d)) = StatusWrapper::init(w-1,0,0,LEFT,Gangster::init("slick"))
  Terrain(init(w,l,d)) = Terrain::init(w,l,d)


  [FOR ALL( i=[5:w-1] , j=0 , k=[0,d-1])
   WHERE Bloc::IsEmpty(Terrain::BlocCoord(i,j,k))
   AND Random::True
   AND Index < nbGangster
   ]:index 
    ==> {Gangster[index](init(w,l,d)) = StatusWrapper::init(i,j,k,LEFT,Gangster::init("Scumbag"))}

[step]

/* A. Getting Kicked: */
REQUIRE: inRange(C,p1,p2) 
         AND NOT Personnage::YouDeadMen((StatusWrapper::getPerso(p1)));
              
p1=alex AND p2 IN {Slick, Gangsters[i]}
    alex(step(C,CR,CA)) =
        Personnage::removeHP(StatusWrapper::getPerso(alex(c)))
        AND
        StatusWrapper::setFreeze(alex(c),3);
        AND
        {
        max(0,StatusWrapper::x(p1)-3) if SW::direction(p1) = RIGHT
        max(0,StatusWrapper::z(p1)-3) if SW::direction(p1) = DOWN
        min(length-1,StatusWrapper::x(p1)+3) if SW::direction(p1) = LEFT
        min(width-1,StatusWrapper::z(p1)+3) if SW::direction(p1) = UP
        }
       

p1=ryan AND p2 IN {Slick, Gangsters[i]}     
    ryan(step(C,CR,CA)) =
        Personnage::removeHP(StatusWrapper::getPerso(ryan(c)))
        AND
        StatusWrapper::setFreeze(ryan(c),3);
        AND
        {
        max(0,StatusWrapper::x(p1)-3) if SW::direction(p1) = RIGHT
        max(0,StatusWrapper::z(p1)-3) if SW::direction(p1) = DOWN
        min(length-1,StatusWrapper::x(p1)+3) if SW::direction(p1) = LEFT
        min(width-1,StatusWrapper::z(p1)+3) if SW::direction(p1) = UP
        }

p1=slick AND p2 IN {alex, ryan} REQUIRE: CA = KICK OR CR = KICK
    slick(step(C,CR,CA)) =
        Personnage::removeHP(StatusWrapper::getPerso(slick(c)))
        AND
        StatusWrapper::setFreeze(slick(c),3);
        AND
        {
        max(0,StatusWrapper::x(p1)-3) if SW::direction(p1) = RIGHT
        max(0,StatusWrapper::z(p1)-3) if SW::direction(p1) = DOWN
        min(length-1,StatusWrapper::x(p1)+3) if SW::direction(p1) = LEFT
        min(width-1,StatusWrapper::z(p1)+3) if SW::direction(p1) = UP
        }

p1=gangster[i] AND p2 IN {alex, ryan}  REQUIRE: CA = KICK OR CR = KICK 
    gangsters[i](step(C,CR,CA)) =
        Personnage::removeHP(StatusWrapper::getPerso(gangsters[i](c)))
        AND
        StatusWrapper::setFreeze(gangsters[i](c),3);
        AND
        {
        max(0,StatusWrapper::x(p1)-3) if SW::direction(p1) = RIGHT
        max(0,StatusWrapper::z(p1)-3) if SW::direction(p1) = DOWN
        min(length-1,StatusWrapper::x(p1)+3) if SW::direction(p1) = LEFT
        min(width-1,StatusWrapper::z(p1)+3) if SW::direction(p1) = UP
        }

/*END GETTING KICKED*/
        
/*B. Move*/
p1(step(C,CR,CA)) REQUIRE: p1.isFrozen = false
 
alex(step(C,CR,CA)) = {
        max(0,StatusWrapper::x(alex(C))-3) if CA = RIGHT
        max(0,StatusWrapper::z(alex(C))-3) if CA = DOWN
        min(length-1,StatusWrapper::x(alex(C))+3) if CA = LEFT
        min(width-1,StatusWrapper::z(alex(C))+3) if CA = UP
        }

ryan(step(C,CR,CA)) = {
        max(0,StatusWrapper::x(ryan(c))-3) if CA = RIGHT
        max(0,StatusWrapper::z(ryan(c))-3) if CA = DOWN
        min(length-1,StatusWrapper::x(ryan(c))+3) if CA = LEFT
        min(width-1,StatusWrapper::z(ryan(c))+3) if CA = UP
        }                

/*END MOVE*/

/* C. PICKUP */
REQUIRE Bloc::hasTreasure(Terrain::GetBlocCoord(SW::x(p(c)),SW::y,SW::z)) p in {alex,ryan}

    alex(step(C,CR,CA)) = 
     	O := Bloc::getTreasure(Terrain::GetBlocCoord(SW::x(Alex(c)),SW::y,SW::z))
    	O.Type = Sellable
        Personnage::addMoney(StatusWrapper::getPerso(alex(C)),Object::getValue(O));
        O.Type = Usable
        Personnage::pickUp(StatusWrapper::getPerso(alex(C)),O);
        
    ryan(step(C,CR,CA)) = 
     	O := Bloc::getTreasure(Terrain::GetBlocCoord(SW::x(ryan(c)),SW::y,SW::z))
    	O.Type = Sellable
        Personnage::addMoney(StatusWrapper::getPerso(ryan(C)),Object::getValue(O));
        O.Type = Usable
        Personnage::pickUp(StatusWrapper::getPerso(ryan(C)),O);

/*END PICKUP*/

/*D. UNFREEZE */
    
    alex(step(C,CR,CA)) = sw::decFreeze(alex(c));
    ryan(step(C,CR,CA)) = sw::decFreeze(ryan(c));
    slick(step(C,CR,CA)) = sw::decFreeze(slick(c));
    gangsters[i](step(C,CR,CA)) = sw::decFreeze(slick(c));

/*END UNFREEZE*/

	
       
    


    
